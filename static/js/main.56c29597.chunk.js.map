{"version":3,"sources":["TransitionStencilOverlay/styles.module.css","TreeModel.js","Tree.js","TreeScene.js","TransitionStencilOverlay/Component.js","App.js","index.js"],"names":["module","exports","TreeModel","props","useGLTF","nodes","materials","mashRef","useRef","useState","shineTree","setShineTree","useEffect","animate","console","log","current","rotation","x","gsap","from","repeat","y","MathUtils","degToRad","ease","delay","dispose","scale","position","ref","onClick","geometry","Tree_13_m0_0","material","roughness","color","emissive","envMapIntensity","preload","Tree","pointLightRefSky","pointLightRef","pointLightRef2","sceneRef","useHelper","PointLightHelper","camera","useThree","set","lookAt","fromTo","duration","Cloud","opacity","speed","width","depth","segments","intensity","Suspense","fallback","args","TreeScene","fov","TransitionStencilOverlay","className","s","overlay","App","introImage","elRef","to","yPercent","rootElement","document","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.56c29597.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"overlay\":\"styles_overlay__3WM-A\"};","/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\nauthor: Smack (https://sketchfab.com/plaghuurtne)\nlicense: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)\nsource: https://sketchfab.com/3d-models/tree-13-9fc868e9e50e44d18c430e259cd1d843\ntitle: Tree 13\n*/\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { useGLTF } from \"@react-three/drei\";\nimport gsap from \"gsap-trial\";\nimport { MathUtils, useThree } from \"three\";\n\nexport default function TreeModel(props) {\n  const { nodes, materials } = useGLTF(\"/tree.glb\");\n\n  const mashRef = useRef();\n  const [shineTree, setShineTree] = useState(false);\n\n  useEffect(() => {\n    if (props.animate) {\n      console.log(\"mashRef\", mashRef.current.rotation.x);\n      gsap.from(mashRef.current.rotation, 17, {\n        repeat: -1,\n        y: MathUtils.degToRad(360),\n        ease: \"none\",\n        delay: 1\n      });\n    }\n  }, [props.animate]);\n\n  return (\n    <group {...props} dispose={null} scale={\"0.06\"}>\n      <group>\n        <group>\n          <group position={[0, 6.46, 0.06]}>\n            <mesh\n              ref={mashRef}\n              onClick={() => setShineTree((shineTree) => !shineTree)}\n              geometry={nodes.Tree_13_m0_0.geometry}\n              material={materials.material}\n            >\n              {shineTree && (\n                <meshPhysicalMaterial\n                  roughness={0}\n                  color=\"gold\"\n                  emissive=\"red\"\n                  envMapIntensity={0.2}\n                  // wireframe\n                />\n              )}\n            </mesh>\n          </group>\n        </group>\n      </group>\n    </group>\n  );\n}\n\nuseGLTF.preload(\"/tree.glb\");\n","import * as THREE from \"three\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { PointLightHelper } from \"three\";\nimport { OrbitControls, useHelper, Cloud } from \"@react-three/drei\";\nimport { useThree } from \"@react-three/fiber\";\nimport TreeModel from \"./TreeModel\";\nimport gsap from \"gsap-trial\";\n\nconst Tree = (props) => {\n  const pointLightRefSky = useRef();\n  const pointLightRef = useRef();\n  const pointLightRef2 = useRef();\n  const sceneRef = useRef();\n\n  useHelper(pointLightRefSky, PointLightHelper, 1, \"blue\");\n  useHelper(pointLightRef, PointLightHelper, 1, \"yellow\");\n  useHelper(pointLightRef2, PointLightHelper, 1, \"red\");\n  const { camera } = useThree();\n\n  useEffect(() => {\n    camera.position.set(15, 10, 0);\n    camera.lookAt(0, 5, 0);\n    gsap.set(camera.position, { y: 50 });\n    if (props.animate) {\n      console.log(\"sceneRef\", sceneRef.current);\n      gsap.fromTo(\n        camera.position,\n        { y: 50 },\n        { duration: 5, y: 10, delay: 5, ease: \"power4,inOut\" }\n      );\n      console.log(\"camera\", camera);\n    }\n  }, [props.animate]);\n\n  return (\n    <>\n      <Cloud\n        position={[0, 25, 0]}\n        color=\"#89cff0\"\n        opacity={0.3}\n        speed={0.4} // Rotation speed\n        width={10} // Width of the full cloud\n        depth={1.5} // Z-dir depth\n        segments={20} // Number of particles\n      />\n      <Cloud\n        position={[4, 30, 0]}\n        color=\"white\"\n        opacity={0.9}\n        speed={0.2} // Rotation speed\n        width={15} // Width of the full cloud\n        depth={1.5} // Z-dir depth\n        segments={20} // Number of particles\n      />\n      <pointLight\n        ref={pointLightRefSky}\n        position={[50, 50, -40]}\n        color=\"white\"\n        dispose={2}\n        intensity={0.4}\n      />\n      <pointLight\n        ref={pointLightRef}\n        position={[1, 0, 0]}\n        color=\"yellow\"\n        intensity={0.6}\n      />\n      <pointLight\n        ref={pointLightRef2}\n        position={[10, 4, -1]}\n        color=\"red\"\n        intensity={0.5}\n      />\n      <React.Suspense fallback={null}>\n        <TreeModel animate={props.animate} />\n        {/* <Html\n          transform\n          distanceFactor={20}\n          position={[0, 0, 15]}\n          rotateY={90}\n          style={{\n            background: \"white\",\n            fontSize: \"50px\",\n            padding: \"10px 18px\",\n            border: \"2px solid black\"\n          }}\n        >\n          HTML content\n        </Html> */}\n        <gridHelper args={[30, 30, 30]} />\n      </React.Suspense>\n      {/* <OrbitControls /> */}\n    </>\n  );\n};\n\nexport default Tree;\n","import * as THREE from \"three\";\nimport React from \"react\";\nimport { Canvas } from \"@react-three/fiber\";\nimport Tree from \"./Tree\";\n\nconst TreeScene = (props) => {\n  return (\n    <Canvas rotation={[0, 0, 0]} camera={{ position: [0, 15, 0], fov: 60 }}>\n      <ambientLight position={[15, 0, 0]} intensity={0.1} />\n      <Tree animate={props.animate} />\n    </Canvas>\n  );\n};\n\nexport default TreeScene;\n","import React from \"react\";\nimport s from \"./styles.module.css\";\n\nconst TransitionStencilOverlay = () => {\n  return <div className={s.overlay}>OVERLAY</div>;\n};\n\nexport default TransitionStencilOverlay;\n","import { useEffect, useRef } from \"react\";\nimport TreeScene from \"./TreeScene\";\nimport gsap from \"gsap-trial\";\nimport TransitionStencilOverlay from \"./TransitionStencilOverlay/Component\";\nimport \"./styles.css\";\n\nexport default function App() {\n  const introImage = useRef();\n  const elRef = useRef();\n\n  useEffect(() => {\n    gsap.to(introImage.current, {\n      duration: 5,\n      yPercent: -100,\n      delay: 3,\n      ease: \"power4.in\"\n    });\n  }, []);\n\n  return (\n    <div className=\"App\" ref={elRef}>\n      <div className=\"html-wrapper html-wrapper--back\">\n        <div className=\"paragraph\">Back content</div>\n      </div>\n      <div className=\"intro-image\" ref={introImage}></div>\n      <TransitionStencilOverlay />\n      <TreeScene animate={true} />\n      <div className=\"html-wrapper\">\n        <div className=\"paragraph\">Front content</div>\n      </div>\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}